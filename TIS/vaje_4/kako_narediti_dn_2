1728 px
1Č 2B 1Č 3B 1Č 7B 1Č 150B

če se začne z črnim pixlom urinemo beli pixel dolžine 0 -> standard, vedno začnemo z belim

0B 1Č 2B 1Č 3B 1Č 7B 1Č 150B

si zapišemo zaporedja
B = [0, 2, 3, 7, 150]
Č = [1, 1, 1, 1]
primer
B = [0, 2, 3, 7, 150, 300, 2, 3, 7, 150, 300, 76]
Č = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 716]

če hočemo generirati original, ni težko -> cik cak in sestavljamo nazaj sliko

skupaj belih = 1000
skupaj črnuhov = 728

To se zakodira s pomočjo Huffmanovega kodiranje
posebej za bele pixle
posebej za črne pixle

vsaka možna dolžina ima predpisano kodno zamenjavo binarno
mi bomo drgač naredili
kodno zamenjavo na podlagi statistike ki jo dobimo iz dokumenta
kolikokrat se vsaka od črnih / belih pojavi -> dobimo frekvence
iz tega izračunamo verjetnost
na podlagi tega izračunamo huffmanovo drevo,
ki ga uporabimo za kodiranje dokumenta

Če želimo narediti Huffmanovo drevo rabimo:
- verjetnosti posameznih dolžin

dolžine, ki se pojavijo:
 0,   2,   3,   7,   76,  150, 300
 1    2    2    2     1    2    2 -> deljeno 12
1/12 2/12 2/12 2/12 1/12 2/12 2/12



3	0	1/12	
3	76	1/12	2/12	
3	2	2/12			4/12
3	3	2/12	4/12			12/12
3	7	2/12			8/12
3	150 2/12	4/12
2	300 2/12			gor(3)
^
dolžine kodnih zamenjav za posamezno dolžino

Postopek, ki nam da vedno enolične kodne zamenjave
- kanoničen Huffmanov kod

- najprej najkrajše dolžine k. z.
- najprej po dolžini pol pa vrednosti znaka
- prvo nafilamo z ničlami da željene dolžine
- prištejemo prejšni 1, in zamaknemo v levo do prave dolžine k. z.

z 	l(i) 	kodne zamenjave
300	 2		00
0	 3		010
2	 3		011
3	 3		100
7	 3		101
76	 3		110
150  3		111

pixle zamenjamo z kodnimi zamenjavami
aka. 0B -> 010
	 2B -> 011

to je za bele pixle, zdaj je treba narediti še za črne pixle


1		2		716
10/12	1/12	1/12

uredimo po verjetnosti

2	2	1/12	
2	716	1/12	2/12
1	1	10/12			12/12
^
dolžine kodov

z 	l(i) 	kodne zamenjave
1	 1 		0
2	 2		10
716	 2		11


IZHOD = [ 010 0  011 0  100 0  101 0 111 0 000 011 0 100 0 101 0 ...]
		  0B  1Č 2B	 1Č	3B	1Č

??? vsako vrstico po sebej ~ error: wierd statement

razen drevo se zgenerira iz statistike CELOTNEGA dokumenta

Kaj mora funkcija vrnit?

function [izhod, R, kodBela, kotCrna] = naloga2(vhod)

R - kompresijsko razmerje
R = dolzina izhoda / dolzina vhoda (v bitih)

kodBela [0 3
		 2 3
		 3 3]

kodBela/kodČrna ~ za vsako dolžino zaporedja, dolžina kodne zamenjave

fax se temu izogne z vnaprej definiranimi dolžinami kodnih zamenjav


Kako Huffmanovo drevo zgraditi v Octave?

v matriki

v prvi stolpec zapišemo simbole, ki jih želimo kodirati
v drugi stolpec verjetnosti
v tretjem stolpcu bomo dobili dolžine kodnih zamenjav
dva pomožna stolpca i ter j


na začetku napolnimo s znaki in verjetnostmi
npr. za črnuhe

	z(i)	p(i)
1.	1		10/12
2.	2		1/12
3.	716		1/12

poiščemo najmanjšo verjetnost -> funkcija ki izpiše minimum v danem stolpcu
poiščemo naslednjo
v naslednjo prazno? vrstico napišemo vsoto najmanjši vrstic
ter v i in j v naslednji napišemo iz katerih vrstic smo združili verjetnosti
pogledamo če imamo kakšen znak, ki ga še nismo uporabili
v naslednjo prazno? vrstico napišemo i ter j
(dodamo prazno?)

na začetku l(i) napolnimo z ničlami


od spodej navgor
gledamo i ter j in prištevamo vrstica i ter j 1

spet gledamo i ter j
vrsticam prištejemo kar je že bilo prišteto
nato še plus 1

1.
gledamo vrstica kjer je najmanjša trenutna vrstica
zapišemo v naslednjo prosto sešteto vrstico ter i in j

ko vse znake ponucamo >> smo pršli do vsote verjtnosti 1

2.
gremo nazaj
pogledamo i ter j
prištejemo i-ti ter j-ti vrstici kar je blo v l(i)
ter prištejemo 1



