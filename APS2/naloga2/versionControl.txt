 public interface Multiplication {
        void multiply(int[] a, int[] b);
    }

    public class DivConqMulti implements Multiplication {
        int base;

        public DivConqMulti(int base) {
            this.base = base;
        }

        @Override
        public void multiply(int[] a, int[] b) {
            int[] product = multiply(a, b, 0, a.length, 0, b.length);
        }

        public int[] multiply(int[] a, int[] b, int aStart, int aEnd, int bStart, int bEnd) {

            print(aStart, aEnd, a);
            System.out.print(" ");
            print(bStart, bEnd, b);
            System.out.println();

            int aLen = aEnd - aStart;
            int bLen = bEnd - bStart;

            if (aLen == 0 || bLen == 0) {
                System.out.println(0);
                return new int[(a.length + b.length + 2)];
            }

            if (aLen < 2 || bLen < 2) {

                int[] result = new int[(a.length + b.length + 2)];
                int index = 0;

                if (aLen < bLen) {
                    for (int i = bEnd - 1; i >= bStart; i--) {
                        result[index] += a[aStart] * b[i];
                        result[index + 1] += result[index] / base;
                        result[index] %= base;

                        index += 1;
                    }

                    result[index + 1] += result[index] / base;
                    result[index] %= base;
                }
                else {
                    for (int i = aEnd - 1; i >= aStart; i--) {
                        result[index] += a[i] * b[bStart];
                        result[index + 1] += result[index] / base;
                        result[index] %= base;

                        index += 1;
                    }

                    result[index + 1] += result[index] / base;
                    result[index] %= base;
                }

//                System.out.printf("offset: %d, index: %d\n", offset, index);
//                System.out.println(Arrays.toString(result));

                print(numberLength(result) + 1, 0, result);
                System.out.println();
                return result;
            }

            int aHalf = ( aStart + aEnd ) / 2;
            int bHalf = ( bStart + bEnd ) / 2;

//            if (aLen > bLen) {
//                bHalf -= 1;
//            }
//            else if (bLen > aLen) {
//                aHalf -= 1;
//            }

            int offset = aLen > bLen ? aLen : bLen;
            if (offset % 2 != 0) {
                offset += 1;
            }

//            System.out.printf("%d / 2 = %d\n", offset, offset / 2);
            int half = offset / 2;
//            System.out.println(half);

            aHalf = aStart + half;
            bHalf = bStart + half;
            System.out.printf("%d %d\n", aHalf, bHalf);

            if (bHalf > bEnd) {
                bHalf = bEnd;
            }

            if (aHalf > aEnd) {
                aHalf = aEnd;
            }



            int[] a1b1 = multiply(a, b, aHalf,  aEnd,  bHalf,  bEnd);
            int[] a1b0 = multiply(a, b, aHalf,  aEnd,  bStart, bHalf);
            int[] a0b1 = multiply(a, b, aStart, aHalf, bHalf,  bEnd);
            int[] a0b0 = multiply(a, b, aStart, aHalf, bStart, bHalf);

            shift(a1b0, offset / 2);
            shift(a0b1, offset / 2);
            shift(a0b0, offset);

//            System.out.println(Arrays.toString(a1b1));
//            System.out.println(Arrays.toString(a1b0));
//            System.out.println(Arrays.toString(a0b1));
//            System.out.println(Arrays.toString(a0b0));

            for (int i = 0; i < a1b1.length - 1; i++) {
                a1b1[i] += a0b1[i] + a1b0[i] + a0b0[i];
                a1b1[i + 1] += a1b1[i] / base;
                a1b1[i] %= base;

            }

//            System.out.println(Arrays.toString(a1b1));

            print(numberLength(a1b1) + 1, 0, a1b1);
            System.out.println();
            return a1b1;
        }
    }

    private static void shift(int[] arr) {
        int tmp = arr[arr.length - 1];
        System.arraycopy(arr, 0, arr, 1, arr.length - 1);
        arr[0] = tmp;
    }

    private static void shift(int[] arr, int amount) {
        for (int i = 0; i < amount; i++) {
            shift(arr);
        }
    }